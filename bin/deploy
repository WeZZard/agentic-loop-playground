#!/bin/bash

# Deploy script for Global Claude Code configuration
# Deploys Markdown documents from agents/ and commands/ directories

set -e  # Exit on any error

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
AGENTS_DIR="$PROJECT_ROOT/agents"
COMMANDS_DIR="$PROJECT_ROOT/commands"

# Default deployment destination (can be overridden via environment variable)
DEPLOY_DEST="${CLAUDE_CONFIG_DIR:-$HOME/.claude}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to prompt user for confirmation
prompt_user() {
    local message="$1"
    local response
    
    while true; do
        echo -e "${YELLOW}$message${NC}"
        read -p "Continue? (y/n): " response < /dev/tty
        case $response in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes (y) or no (n).";;
        esac
    done
}

# Function to check if file exists and prompt for overwrite
check_and_prompt_overwrite() {
    local source_file="$1"
    local dest_file="$2"
    local relative_path="$3"
    
    if [[ -f "$dest_file" ]]; then
        log_warning "File already exists: $relative_path"
        echo "Source: $source_file"
        echo "Destination: $dest_file"
        
        if prompt_user "Do you want to overwrite the existing file?"; then
            return 0  # Proceed with deployment
        else
            log_info "Skipping deployment of $relative_path"
            return 1  # Skip this file
        fi
    fi
    
    return 0  # File doesn't exist, proceed
}

# Function to deploy a single file
deploy_file() {
    local source_file="$1"
    local dest_dir="$2"
    local relative_path="$3"
    
    local dest_file="$dest_dir/$relative_path"
    local dest_parent_dir="$(dirname "$dest_file")"
    
    # Check if source file exists
    if [[ ! -f "$source_file" ]]; then
        log_error "Source file does not exist: $source_file"
        return 1
    fi
    
    # Check for existing file and prompt if necessary
    if ! check_and_prompt_overwrite "$source_file" "$dest_file" "$relative_path"; then
        return 0  # User chose to skip
    fi
    
    # Create destination directory if it doesn't exist
    if [[ ! -d "$dest_parent_dir" ]]; then
        log_info "Creating directory: $dest_parent_dir"
        mkdir -p "$dest_parent_dir"
    fi
    
    # Copy the file
    log_info "Deploying: $relative_path"
    cp "$source_file" "$dest_file"
    log_success "Successfully deployed: $relative_path"
    
    return 0
}

# Function to deploy all files from a directory
deploy_directory() {
    local source_dir="$1"
    local dest_subdir="$2"
    local dir_name="$3"
    
    if [[ ! -d "$source_dir" ]]; then
        log_warning "$dir_name directory does not exist: $source_dir"
        return 0
    fi
    
    log_info "Deploying $dir_name from: $source_dir"
    
    local dest_dir="$DEPLOY_DEST/$dest_subdir"
    local file_count=0
    local deployed_count=0
    
    # Find all .md files in the source directory
    while IFS= read -r -d '' file; do
        ((file_count++))
        local relative_path="$(basename "$file")"
        
        if deploy_file "$file" "$dest_dir" "$relative_path"; then
            ((deployed_count++))
        fi
    done < <(find "$source_dir" -name "*.md" -type f -print0)
    
    if [[ $file_count -eq 0 ]]; then
        log_warning "No Markdown files found in $dir_name directory"
    else
        log_success "Deployed $deployed_count out of $file_count files from $dir_name"
    fi
}

# Function to display usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Deploy subagents and commands from agents/ and commands/"
    echo "directories to global Claude Code configuration directory."
    echo ""
    echo "Options:"
    echo "  -d, --dest DIR     Set deployment destination directory"
    echo "                     (default: \$CLAUDE_CONFIG_DIR or ~/.claude)"
    echo "  -f, --force        Force overwrite without prompting"
    echo "  -h, --help         Show this help message"
    echo "  --dry-run          Show what would be deployed without actually doing it"
    echo ""
    echo "Environment Variables:"
    echo "  CLAUDE_CONFIG_DIR  Default deployment destination"
    echo ""
    echo "Examples:"
    echo "  $0                                   # Deploy to default location"
    echo "  $0 -d /custom/path                   # Deploy to custom location"
    echo "  $0 --dry-run                         # Preview deployment"
    echo "  CLAUDE_CONFIG_DIR=/path $0  # Set destination via env var"
}

# Parse command line arguments
FORCE_OVERWRITE=false
DRY_RUN=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--dest)
            DEPLOY_DEST="$2"
            shift 2
            ;;
        -f|--force)
            FORCE_OVERWRITE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Main deployment logic
main() {
    log_info "Starting deployment to Global Claude Code configuration"
    log_info "Project root: $PROJECT_ROOT"
    log_info "Deployment destination: $DEPLOY_DEST"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "DRY RUN MODE - No files will be actually deployed"
    fi
    
    # Validate source directories
    local has_sources=false
    
    if [[ -d "$AGENTS_DIR" ]]; then
        has_sources=true
    fi
    
    if [[ -d "$COMMANDS_DIR" ]]; then
        has_sources=true
    fi
    
    if [[ "$has_sources" == "false" ]]; then
        log_error "No source directories found (agents/ or commands/)"
        exit 1
    fi
    
    # Create main deployment directory if it doesn't exist
    if [[ "$DRY_RUN" == "false" ]] && [[ ! -d "$DEPLOY_DEST" ]]; then
        log_info "Creating deployment destination: $DEPLOY_DEST"
        mkdir -p "$DEPLOY_DEST"
    fi
    
    # Override prompt function if force mode is enabled
    if [[ "$FORCE_OVERWRITE" == "true" ]]; then
        check_and_prompt_overwrite() {
            local source_file="$1"
            local dest_file="$2"
            local relative_path="$3"
            
            if [[ -f "$dest_file" ]]; then
                log_warning "Force overwriting: $relative_path"
            fi
            return 0
        }
    fi
    
    # Override deploy_file function for dry run
    if [[ "$DRY_RUN" == "true" ]]; then
        deploy_file() {
            local source_file="$1"
            local dest_dir="$2"
            local relative_path="$3"
            local dest_file="$dest_dir/$relative_path"
            
            if [[ ! -f "$source_file" ]]; then
                log_error "Source file does not exist: $source_file"
                return 1
            fi
            
            if [[ -f "$dest_file" ]]; then
                log_info "[DRY RUN] Would overwrite: $relative_path"
            else
                log_info "[DRY RUN] Would deploy: $relative_path"
            fi
            
            return 0
        }
    fi
    
    # Deploy agents
    deploy_directory "$AGENTS_DIR" "agents" "agents"
    
    # Deploy commands
    deploy_directory "$COMMANDS_DIR" "commands" "commands"
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_success "Dry run completed. Use without --dry-run to perform actual deployment."
    else
        log_success "Deployment completed successfully!"
    fi
}

# Run main function
main "$@"